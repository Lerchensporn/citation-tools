#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import subprocess
import sys
import warnings
import re
from PyPDF2 import PdfFileReader
import urllib.request
import bibtexparser
import json
import tempfile
from citeproc import Citation, CitationItem
import argparse

_doigex = re.compile('[\s\.\:]{0,2}(10\.\d{4}[\d\:\.\-\/a-zA-Z]+)[A-Z\s]')

def bib_save(bibtex, filename, key):
	database = bibtexparser.loads(bibtex)
	if key is not None:
		database.entries[0]["ID"] = key
	fp = open(filename, "w")
	writer = bibtexparser.bwriter.BibTexWriter()
	writer.indent = "	"
	fp.write(writer.write(database))
	fp.close()
	print("Database written to: %s" % filename)

def doi2bib(doi):
	url = "http://dx.doi.org/" + doi
	headers = {"accept" : "application/x-bibtex"}
	req = urllib.request.Request(url, headers=headers)
	try:
		resp = urllib.request.urlopen(req)
	except urllib.error.HTTPError as err:
		if err.code == 404:
			print("Invalid DOI: %s" % doi, file=sys.stderr)
		else:
			raise
		return None
	return resp.read().decode(encoding="utf-8")

def doi_from_file2(filename):
	popel = subprocess.Popen(["pdftotext", "-f", "1", "-l", "10", "-raw", filename,
		"-"], stdout=subprocess.PIPE)
	output = popel.communicate()[0].decode()
	finds = _doigex.findall(output)
	return finds[0] if len(finds) > 0 else None

# use the low-quality output of PyPDF2
def doi_from_file(filename):
	fp = open(filename, "rb")
	with warnings.catch_warnings():
		warnings.simplefilter("ignore")
		try:
			pdf = PdfFileReader(fp)
		except:
			return None
	finds = []
	for i in range(min(10, pdf.getNumPages())):
		text = pdf.getPage(i).extractText().join("/\n")
		finds = _doigex.findall(text)
		if len(finds) > 0:
			break
	fp.close()
	return finds[0] if len(finds) > 0 else None

def main():
	parser = argparse.ArgumentParser()
	parser.add_argument("sources", nargs="+", help="List of DOI or file names")
	parser.add_argument("--save", help="Directory where to save the database files.")
	args = parser.parse_args()
	refitems = []
	for refitem in args.sources:
		key = None
		if os.path.exists(refitem):
			if not os.path.isfile(refitem):
				print("Not a file: {}".format(refitem))
				continue
			doi = None
			try:
				doi = doi_from_file(refitem)
			except:
				pass
			if doi is None:
				doi = doi_from_file2(refitem)
			if doi is None:
				print("-> " + os.path.split(refitem)[1] + ":", file=sys.stderr)
				print("	The documents contains no DOI.", file=sys.stderr)
				continue
			base, tail = os.path.split(refitem)
			key = re.split("[ .,]+", tail)[0]
		else:
			doi = refitem
		bibtex = doi2bib(doi)
		if key is None:
			database = bibtexparser.loads(bibtex)
			key = database.entries[0]["ID"]
		if bibtex is None:
			continue
		if args.save is not None:
			filename = os.path.join(args.save, key + ".bib")
			bib_save(bibtex, filename, key)
		else:
			print(bibtex)

if __name__ == "__main__":
	main()
